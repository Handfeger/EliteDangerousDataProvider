<Window x:Class="configuration.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:j="clr-namespace:EliteDangerousDataDefinitions;assembly=EliteDangerousDataDefinitions"
        xmlns:local="clr-namespace:configuration"
        mc:Ignorable="d"
        Title="EDDI Configuration" Height="600"  Width="800">
    <Window.Resources>
        <ObjectDataProvider x:Key="roleValues" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="j:ShipRole"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </Window.Resources>
    <DockPanel LastChildFill="True">
        <TabControl x:Name="tabControl" DockPanel.Dock="Top">
            <TabItem Header="EDDI">
                <DockPanel LastChildFill="True" Background="#FFE5E5E5">
                    <TextBlock x:Name="eddiText" DockPanel.Dock="Top" TextWrapping="Wrap" Margin="20" Text="EDDI has a number of features that can be configured separately.  Please click on each individual tab above to obtain an explanation of what it provides and how to configure it.  Once you have made changes here you will need to restart VoiceAttack for them to take effect.a" VerticalAlignment="Top"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock x:Name ="eddi2Text" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="You can provide the name of a particular system you consider home, and also a station inside that system if you want" VerticalAlignment="Top"/>
                        <Label x:Name ="eddiHomeSystemLabel" Grid.Row="1" Grid.Column="0" Content="Home system:" />
                        <TextBox x:Name ="eddiHomeSystemText" Grid.Row="1" Grid.Column="1" Margin="3" TextChanged="homeSystemChanged"/>
                        <Label x:Name ="eddiHomeStationLabel" Grid.Row="2" Grid.Column="0" Content="Home station:"/>
                        <TextBox x:Name ="eddiHomeStationText" Grid.Row="2" Grid.Column="1" Margin="3" TextChanged="homeStationChanged"/>
                        <TextBlock x:Name ="eddi3Text" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="Your insurance excess is the % of your ship's value you have to pay if your ship is destroyed.  This will usually be 5 but could be less if you are an early backer of Elite with alpha backers being 2.5 and beta backers being 3.75.  If you aren't sure then leave it at 5" VerticalAlignment="Top"/>
                        <Label x:Name ="eddiInsuranceLabel" Grid.Row="4" Grid.Column="0" Content="Insurance excess (%):"/>
                        <xctk:DecimalUpDown x:Name="eddiInsuranceDecimal" FormatString="F2" Increment=".25" Grid.Row="4" Grid.Column="1" Margin="3" ValueChanged="insuranceChanged"/>
                    </Grid>
                </DockPanel>
            </TabItem>
            <TabItem Header="Companion App">
                <DockPanel LastChildFill="True" Background="#FFE5E5E5">
                    <TextBlock DockPanel.Dock="Top" TextWrapping="Wrap" Margin="20" Text="The companion app is Frontier's API in to their data.  If you configure this you can obtain information about your commander, your ship and your stored ships.  Please note that if you purchased Elite: Dangerous Horizons as a standalone product and not as an expansion to Elite: Dangerous the companion app will not work for you." VerticalAlignment="Top"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock x:Name ="companionAppText" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="You do not have a connection to the companion app at this time.  Please enter your Elite: Dangerous email address and password below" VerticalAlignment="Top"/>
                        <Label x:Name ="companionAppEmailLabel" Grid.Row="1" Grid.Column="0" Content="Email:"/>
                        <TextBox x:Name ="companionAppEmailText" Grid.Row="1" Grid.Column="1" Margin="3" />
                        <Label x:Name ="companionAppPasswordLabel" Grid.Row="2" Grid.Column="0" Content="Password:"/>
                        <PasswordBox x:Name ="companionAppPasswordText" Grid.Row="2" Grid.Column="1" Margin="3" />
                        <Button  x:Name="companionAppNextButton" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Content="Next" Margin="10" Click="companionAppNextClicked"/>
                        <Label x:Name ="companionAppCodeLabel" Visibility="Hidden" Grid.Row="1" Grid.Column="0" Content="Code:"/>
                        <TextBox x:Name ="companionAppCodeText" Visibility="Hidden" Grid.Row="1" Grid.Column="1" Margin="3" />
                    </Grid>
                </DockPanel>
            </TabItem>
            <TabItem Header="Netlog Monitor">
                <DockPanel LastChildFill="True" Background="#FFE5E5E5">
                    <TextBlock x:Name="netlogText" DockPanel.Dock="Top" TextWrapping="Wrap" Margin="20" Text="The netlog monitor reads a file written by Elite and uses information in it to provide system information." VerticalAlignment="Top"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock x:Name="netLogText" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="To configure netlog monitoring you need to provide the path to your Elite: Dangerous product log.  This is commonly in C:\Program Files (x86)\Elite\Products\elite-dangerous-64\Logs but might be in a different location if you have installed Elite through Steam or in a non-standard location" VerticalAlignment="Top"/>
                        <Label Grid.Row="1" Grid.Column="0" Content="Product Logs directory"/>
                        <TextBox x:Name="netLogPathTextBox" Grid.Row="1" Grid.Column="1" Margin="3" TextChanged="netLogPathChanged" />
                        <TextBlock Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="If you are unsure of where the directory is you can start Elite: Dangerous then come back to this window and hit the 'Obtain' button below" VerticalAlignment="Top" />
                        <Button Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" x:Name="obtainButton" Content="Obtain" Margin="10" Click="netLogObtainClicked"/>
                    </Grid>
                </DockPanel>
            </TabItem>
            <TabItem Header="EDSM">
                <DockPanel LastChildFill="True" Background="#FFE5E5E5">
                    <TextBlock x:Name="edsmText" DockPanel.Dock="Top" TextWrapping="Wrap" Margin="20" Text="EDSM is a third-party tool that provides information on the locations of star systems and keeps a log of the star systems you have visited.  It uses the data provided to crowd-source a map of the galaxy." VerticalAlignment="Top"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="To connect to EDSM you need to have registered an account with them.  Once you have done this you can obtain your API key by clicking on your portrait in the top-right corner of the screen and selecting 'My API Key'" VerticalAlignment="Top"/>
                        <Label Grid.Row="1" Grid.Column="0" Content="EDSM API key"/>
                        <TextBox x:Name="edsmApiKeyTextBox" Grid.Row="1" Grid.Column="1" Margin="3" TextChanged="edsmApiKeyChanged"/>
                        <TextBlock Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="If you registered a different commander name to your actual one, or you have not enabled the companion app, please enter your commander name below" VerticalAlignment="Top"/>
                        <Label Grid.Row="3" Grid.Column="0" Content="EDSM Commander name"/>
                        <TextBox x:Name="edsmCommanderNameTextBox" Grid.Row="3" Grid.Column="1" Margin="3" TextChanged="edsmCommanderNameChanged"/>
                        <TextBlock Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="Once you have entered your data above you can pull your existing logs from EDSM so that EDDI knows how many times you have been to each system.  You only need to do this the first time you set up EDSM.  Note that this can take a while to run" VerticalAlignment="Top"/>
                        <Button x:Name="edsmFetchLogsButton" Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Content="Obtain EDSM log" Margin="10" Click="edsmObtainLogClicked"/>
                    </Grid>
                </DockPanel>
            </TabItem>
            <TabItem Header="Shipyard">
                <DockPanel LastChildFill="True" Background="#FFE5E5E5">
                    <TextBlock x:Name="shipyardText" DockPanel.Dock="Top" TextWrapping="Wrap" Margin="20" Text="This allows you to set names and callsigns for your ships.  The information is made available in VoiceAttack for use by scripts.  If the name of your ship is hard for EDDI to pronounce then you can add a spoken version of the ship using IPA.  For example, if your ship was called 'Pride of Achenar' then your spoken name would be 'praɪdɒvˈakɜːnɑ' (note no spaces in the phonetic version).  Please note that for this feature to work the companion app needs to be configured" VerticalAlignment="Top"/>
                    <DataGrid AutoGenerateColumns="False" x:Name="shipyardData" CanUserAddRows="false" TargetUpdated="shipYardUpdated">
                        <DataGrid.Columns>
                            <DataGridTextColumn IsReadOnly="True" Header="Model" Binding="{Binding Path=Model}"></DataGridTextColumn>
                            <DataGridTextColumn IsReadOnly="True" Header="In Storage At" Binding="{Binding Path=StarSystem}"></DataGridTextColumn>
                            <DataGridComboBoxColumn x:Name ="Role" Header="Role" SelectedItemBinding="{Binding Path=Role,  NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" ItemsSource="{Binding Source={StaticResource roleValues}}"></DataGridComboBoxColumn>
                            <DataGridTextColumn Header="Name" Width="*" Binding="{Binding Path=Name,  NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, TargetNullValue={x:Static System:String.Empty}}"></DataGridTextColumn>
                            <DataGridTextColumn Header="Name (spoken)" Width="*" Binding="{Binding Path=PhoneticName,  NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, TargetNullValue={x:Static System:String.Empty}}"></DataGridTextColumn>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Click="testShipName">Hear it</Button>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn IsReadOnly="True" Header="Callsign" MinWidth="40" Binding="{Binding Path=CallSign}"></DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </DockPanel>
            </TabItem>
            <TabItem Header="Text-to-Speech">
                <DockPanel LastChildFill="True" Background="#FFE5E5E5" Margin="0,2,0,-2">
                    <TextBlock x:Name="ttsText" DockPanel.Dock="Top" TextWrapping="Wrap" Margin="20" Text="EDDI uses its own text-to-speech engine that processes the voice depending on feature such as ship damage and size of cockpit.  You can adjust the voice's parameters here." />
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>
                        <Label x:Name="ttsVoiceLabel" Grid.Column="0" Grid.Row="0" Content="Voice:" />
                        <ComboBox x:Name="ttsVoiceDropDown" Margin="3" Grid.Column="1" Grid.Row="0" SelectionChanged="ttsVoiceDropDownUpdated"/>
                        <Label x:Name="ttsRateLabel" Grid.Column="0" Grid.Row="1" Content="Speed of speech:" />
                        <DockPanel LastChildFill="True" Margin="3" Grid.Column="1" Grid.Row="1" >
                            <TextBox x:Name="ttsRateText"  DockPanel.Dock="Right" Text="{Binding ElementName=ttsRateSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" TextAlignment="Right" Width="40"/>
                            <Slider x:Name="ttsRateSlider" Minimum="-10" Maximum="10"  IsSnapToTickEnabled="True" TickFrequency="1" ValueChanged="ttsRateUpdated"/>
                        </DockPanel>
                        <Label x:Name="ttsEffectsLevelLabel" Grid.Column="0" Grid.Row="2" Content="Level of voice processing:" />
                        <DockPanel LastChildFill="True" Margin="3" Grid.Column="1" Grid.Row="2" >
                            <TextBox x:Name="ttsEffectsLevelText"  DockPanel.Dock="Right" Text="{Binding ElementName=ttsEffectsLevelSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" TextAlignment="Right" Width="40"/>
                            <Slider x:Name="ttsEffectsLevelSlider" Minimum="0" Maximum="100"  IsSnapToTickEnabled="True" TickFrequency="1" ValueChanged="ttsEffectsLevelUpdated"/>
                        </DockPanel>
                        <Label x:Name="ttsDistortLabel" Grid.Column="0" Grid.Row="3" Content="Distort the voice on ship damage:" />
                        <CheckBox x:Name="ttsDistortCheckbox" Margin="3" Grid.Column="1" Grid.Row="3" VerticalAlignment="Center" Checked="ttsDistortionLevelUpdated" Unchecked="ttsDistortionLevelUpdated"/>
                        <TextBlock Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="20" Text="You can test how the voice will sound below.  Note that if the voice is incompatible it will use the default voice instead." />
                        <Button x:Name="ttsTestButton" Grid.Column="0" Grid.Row="5" Grid.ColumnSpan="2" Content="Test voice" Margin="10" Click="ttsTestVoiceButtonClicked" />
                        <Button x:Name="ttsTestDamagedButton" Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="2" Content="Test voice (severe damage)" Margin="10" Click="ttsTestDamagedVoiceButtonClicked" />
                        <Label x:Name="ttsTestShipLabel" Margin="10" Grid.Column="0" Grid.Row="7" Content="Ship for testing the voice:" />
                        <ComboBox x:Name="ttsTestShipDropDown" Margin="10" Grid.Column="1" Grid.Row="7"/>
                    </Grid>
                </DockPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
